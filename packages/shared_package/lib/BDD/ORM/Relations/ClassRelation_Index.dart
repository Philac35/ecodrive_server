// GENERATED BY ClassesRelationIndexGenerator
enum RelationType { belongsTo,belongsToMany, hasOne, hasMany, manyToMany }
class RelationMeta {
  final String fieldName;
  final String relatedType;
  final RelationType type;
  final String foreignKey;
  final bool cascadeOnDelete;
  final bool reuseIfExists;
  final List<String> findBy;  //Needed for reuseIfExist BDD search
  const RelationMeta({required this.fieldName,required this.relatedType,required this.type,required this.foreignKey, this.cascadeOnDelete= false,this.reuseIfExists=true, this.findBy= const []});
}
final Map<String, List<RelationMeta>> ClassRelationsIndex = {
  'Address': [
    RelationMeta(fieldName:'person', relatedType:'Person',type:RelationType.belongsTo, foreignKey: 'person_id', findBy: const ['firstname','lastname']),
    RelationMeta(fieldName:'itinerary', relatedType:'Itinerary',type:RelationType.belongsTo, foreignKey: 'itinerary_id', findBy: const ['address_departure_id','address_arrival_id']),
  ],
  'Administrator': [
    RelationMeta(fieldName:'person', relatedType:'Person',type:RelationType.belongsTo, foreignKey: 'person_id', findBy: const ['firstname','lastname','email']),
  ],
  'Assurance': [
    RelationMeta(fieldName:'photo', relatedType:'Photo',type:RelationType.hasOne, foreignKey: 'photo_id', findBy: const ['title','uri']),
    RelationMeta(fieldName:'vehicule', relatedType:'Vehicule',type:RelationType.belongsTo, foreignKey: 'vehicule_id', findBy: const ['immatriculation']),
  ],
  'AuthUser': [
    RelationMeta(fieldName:'person', relatedType:'Person',type:RelationType.belongsTo, foreignKey: 'person_id', findBy: const ['firstname','lastname','email']),
  ],
  'Command': [
    RelationMeta(fieldName:'user', relatedType:'User',type:RelationType.belongsTo, foreignKey: 'user_id', findBy: const ['firstname','lastname','email']),
  ],
  'Driver': [
    RelationMeta(fieldName:'notices', relatedType:'get',type:RelationType.hasMany, foreignKey: 'notices_id', findBy: const ['title','description']),
    RelationMeta(fieldName:'user', relatedType:'User',type:RelationType.belongsTo, foreignKey: 'user_id', findBy: const ['firstname','lastname','email']),
    RelationMeta(fieldName:'drivingLicence', relatedType:'DrivingLicence',type:RelationType.hasOne, foreignKey: 'drivingLicence_id', findBy: const ['identification_number']),
    RelationMeta(fieldName:'vehicule', relatedType:'Vehicule',type:RelationType.hasOne, foreignKey: 'vehicule_id', findBy: const ['immatriculation']),
  ],
  'DrivingLicence': [
    RelationMeta(fieldName:'driver', relatedType:'Driver',type:RelationType.belongsTo, foreignKey: 'driver_id', findBy: const ['firstname','lastname','email']),
    RelationMeta(fieldName:'photo', relatedType:'Photo',type:RelationType.hasOne, foreignKey: 'photo_id', findBy: const []),
  ],
  'Employee': [
    RelationMeta(fieldName:'person', relatedType:'Person',type:RelationType.belongsTo, foreignKey: 'person_id', findBy: const ['firstname','lastname','email']),
  ],
  'Itinerary': [
    RelationMeta(fieldName:'addressDeparture', relatedType:'Address',type:RelationType.hasOne, foreignKey: 'addressDeparture_id', findBy: const ['address','post_code']),
    RelationMeta(fieldName:'addressArrival', relatedType:'Address',type:RelationType.hasOne, foreignKey: 'addressArrival_id', findBy: const ['address','post_code']),
    RelationMeta(fieldName:'travel', relatedType:'Travel',type:RelationType.belongsTo, foreignKey: 'travel_id', findBy: const ['driver_id','departure_time','arrival_time']),
  ],
  'Notice': [
    RelationMeta(fieldName:'driver', relatedType:'Driver',type:RelationType.belongsTo, foreignKey: 'driver_id', findBy: const ['firstname','lastname','email']),
  ],
  'Person': [
    RelationMeta(fieldName:'photo', relatedType:'Photo',type:RelationType.hasOne, foreignKey: 'photo_id', findBy: const ['title','uri']),
    RelationMeta(fieldName:'authUser', relatedType:'AuthUser',type:RelationType.hasOne, foreignKey: 'authUser_id', findBy: const ['identifiant']),
    RelationMeta(fieldName:'user', relatedType:'User',type:RelationType.hasOne, foreignKey: 'user_id', findBy: const ['firstname','lastname','email']),
    RelationMeta(fieldName:'administrator', relatedType:'Administrator',type:RelationType.hasOne, foreignKey: 'administrator_id', findBy: const ['firstname','lastname','email']),
    RelationMeta(fieldName:'employee', relatedType:'Employee',type:RelationType.hasOne, foreignKey: 'employee_id', findBy: const ['firstname','lastname','email']),
  ],
  'Photo': [
    RelationMeta(fieldName:'person', relatedType:'Person',type:RelationType.belongsTo, foreignKey: 'person_id', findBy: const ['firstname','lastname','email']),
    RelationMeta(fieldName:'vehicule', relatedType:'Vehicule',type:RelationType.belongsTo, foreignKey: 'vehicule_id', findBy: const ['immatriculation']),
    RelationMeta(fieldName:'drivingLicence', relatedType:'DrivingLicence',type:RelationType.belongsTo, foreignKey: 'drivingLicence_id', findBy: const ['identification_number']),
  ],
  'Travel': [
    RelationMeta(fieldName:'driver', relatedType:'Driver',type:RelationType.belongsTo, foreignKey: 'driver_id', findBy: const ['firstname','lastname','email']),
    RelationMeta(fieldName:'itinerary', relatedType:'Itinerary',type:RelationType.hasOne, foreignKey: 'itinerary_id', findBy: const ['address_departure_id','address_arrival_id']),
    RelationMeta(fieldName:'user', relatedType:'List',type:RelationType.hasMany, foreignKey: 'user_id', findBy: const ['firstname','lastname','email']),
  ],
  'User': [
    RelationMeta(fieldName:'person', relatedType:'Person',type:RelationType.belongsTo, foreignKey: 'person_id', findBy: const ['firstname','lastname','email']),
    RelationMeta(fieldName:'driver', relatedType:'Driver',type:RelationType.hasOne, foreignKey: 'driver_id', findBy: const ['firstname','lastname','email']),
    RelationMeta(fieldName:'commandList', relatedType:'Command',type:RelationType.hasMany, foreignKey: 'commandList_id', findBy: const ['reference']),
  ],
  'UserNoticeMtoM': [
    RelationMeta(fieldName:'notice', relatedType:'Notice',type:RelationType.belongsTo, foreignKey: 'notice_id', findBy: const ['title','description']),
    RelationMeta(fieldName:'user', relatedType:'User',type:RelationType.belongsTo, foreignKey: 'user_id', findBy: const ['firstname','lastname','email']),
  ],
  'Vehicule': [
    RelationMeta(fieldName:'photoList', relatedType:'Photo',type:RelationType.hasMany, foreignKey: 'photoList_id', findBy: const ['title','uri']),
    RelationMeta(fieldName:'driver', relatedType:'Driver',type:RelationType.belongsTo, foreignKey: 'driver_id', findBy: const ['firstname','lastname','email']),
    RelationMeta(fieldName:'assurance', relatedType:'Assurance',type:RelationType.hasOne, foreignKey: 'assurance_id', findBy: const ['identification_number']),
  ],
};
